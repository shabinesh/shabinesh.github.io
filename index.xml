<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes</title><link>http://shabinesh.github.io/</link><description>Recent content on Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Mar 2022 09:15:48 +0100</lastBuildDate><atom:link href="http://shabinesh.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>DDD Notes</title><link>http://shabinesh.github.io/notes/ddd-notes/</link><pubDate>Wed, 16 Mar 2022 09:15:48 +0100</pubDate><guid>http://shabinesh.github.io/notes/ddd-notes/</guid><description>(in progress)
Aggregate and Aggregate root Aggregates are cluster of entities and values objects and define boudaries around each. Goal of aggregate is to protect the invariants and guarantee consistency.
The size of the aggregate has an impact. Big aggregate will have issues guaranteeing consistency and forcing transactions on the whole aggregate may cause scalibility issues.
Aggregate roots is the entry point for the aggregate.</description></item><item><title>CDC</title><link>http://shabinesh.github.io/notes/cdc/</link><pubDate>Wed, 19 Jan 2022 14:27:04 +0100</pubDate><guid>http://shabinesh.github.io/notes/cdc/</guid><description>Summary Recently, at HelloFresh I was tasked with prototyping a solution which involved we have a Kafka message published. While the quickest could have been to write a producer and consumer perhaps in the same process. Given its a new code base that was heavily abstracted, which we didn&amp;#39;t understand much and crucial component to core HelloFresh business. Why would we do this to ourselves?
We settled on a non intrusive approach.</description></item><item><title>Elisp function to run Golang unit tests</title><link>http://shabinesh.github.io/notes/run-golang-tests/</link><pubDate>Fri, 16 Jul 2021 11:39:59 +0200</pubDate><guid>http://shabinesh.github.io/notes/run-golang-tests/</guid><description> A elisp function to run a unit test. Put the function in ~/.emacs
(defun go-run-unit-test () (interactive) (let ((lineStr &amp;#34;&amp;#34;)) (if (string= (thing-at-point &amp;#39;word) &amp;#34;func&amp;#34;) (setq lineStr (thing-at-point &amp;#39;word)) (progn (search-backward &amp;#34;func&amp;#34;) (setq lineStr (thing-at-point &amp;#39;line)))) (let ((funcName (string-trim-left (car (split-string (thing-at-point &amp;#39;line) &amp;#34;(&amp;#34;)) &amp;#34;^func\s&amp;#34;))) (start-process &amp;#34;GOTEST&amp;#34; &amp;#34;*GOTEST*&amp;#34; &amp;#34;go&amp;#34; &amp;#34;test&amp;#34; &amp;#34;-run&amp;#34; (concat &amp;#34;^&amp;#34; funcName &amp;#34;$&amp;#34;))))) go-run-unit-test</description></item><item><title>Postgres Partitions</title><link>http://shabinesh.github.io/notes/postgres-partitions/</link><pubDate>Tue, 05 Jan 2021 14:37:33 +0100</pubDate><guid>http://shabinesh.github.io/notes/postgres-partitions/</guid><description>Postgres partitions A better resources is https://www.postgresql.org/docs/10/ddl-partitioning.html
Postgres let&amp;#39;s us split a large table in to smaller entities, done for managebility, performance. Typical usecase includes: Improve query performance of frequently accessed data from fewer partitions. Bulk delete or upload. Eg: Delete all records more than 3 months old. Seperate stale data from actively used data. Partitioning Declarative Declarative partitioning lets us specify the desired outcome without much details on how the partition happens behind the scenes.</description></item><item><title>Mocking AWS Postgres Extensions</title><link>http://shabinesh.github.io/notes/mocking_aws_extensions/</link><pubDate>Sat, 06 Jun 2020 16:13:34 +0200</pubDate><guid>http://shabinesh.github.io/notes/mocking_aws_extensions/</guid><description>Mocking AWS PG Extensions The project I am working on uses RDS with aws_s3 (&amp;amp; aws_commons) postgres extensions. However these extensions are also need postgres docker container used in the CI for integration tests to not break the migrations. A mock extension was built to keep the tests from breaking. Create .control files Create the schema for the module being created Add the functions in the schema in sql files In this case there are two .</description></item><item><title>Golang Reflect</title><link>http://shabinesh.github.io/notes/golang-reflect/</link><pubDate>Tue, 19 May 2020 17:10:38 +0200</pubDate><guid>http://shabinesh.github.io/notes/golang-reflect/</guid><description>Reflection in Golang Incase you are here looking to learn about reflection, a better resource is https://blog.golang.org/laws-of-reflection Interfaces in Go are types which hold concrete value and underlying type of the value with a precondition that value should implement methods of the interface. For example; types implementing Read([]byte) (int, error) method satisfy the io.Reader interface. However interface{}, without any method definition will match all types.
A struct type can be assigned to an empty interface, the assertion is the concrete type should implement the methods of the interface type.</description></item><item><title>Docker Golang</title><link>http://shabinesh.github.io/notes/docker-golang/</link><pubDate>Fri, 08 May 2020 13:53:26 +0200</pubDate><guid>http://shabinesh.github.io/notes/docker-golang/</guid><description>again this is for my self reference or for easy copy-paste for new projects.
Assume this is the production grade program we need to dockerize and run. package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;saying hello to the world&amp;#34;) } Basic #-NAME: Dockerfile multistage build
FROM golang:1.14-alpine as builder WORKDIR /go/src/github.com/shabinesh/prog COPY main.go . COPY vendor ./vendor RUN go build -o main .</description></item><item><title>Hiragana First Steps</title><link>http://shabinesh.github.io/notes/japanese-hiragana-first-steps/</link><pubDate>Tue, 22 May 2018 23:43:08 +0200</pubDate><guid>http://shabinesh.github.io/notes/japanese-hiragana-first-steps/</guid><description>Learning Japanese 1 Welcome to learning Japanese, this is how I am planning to learn Japanese without a teacher. I am writing this series for myself to keep track of my progress, more of notes.
I already have some materials given by my teacher and know some fundamentals. Here are some links I find very useful.
https://www.tofugu.com/japanese/learn-hiragana/ https://www.nhk.or.jp/lesson/english/syllabary/index.html I am going to follow my teacherâ€™s methods: learn the Hiragana characters, learn some words and create basic sentences</description></item><item><title>Productivity First Steps</title><link>http://shabinesh.github.io/posts/productivity-first-steps/</link><pubDate>Sun, 15 Apr 2018 14:15:30 +0200</pubDate><guid>http://shabinesh.github.io/posts/productivity-first-steps/</guid><description>I wanted to share with my friends some of productivity practices I am trying to imbibe in my routine which are giving results. Writing this help me put my ideas in order and I can share without repeating. And here it is. For me being productive is to have more time. The judgement of what is required and what is not, what is worth perusing and what isn&amp;#39;t is a skill to develop.</description></item><item><title>SOLID principles in Golang</title><link>http://shabinesh.github.io/posts/2017-03-23-solid-principals/</link><pubDate>Thu, 23 Mar 2017 11:39:17 +0530</pubDate><guid>http://shabinesh.github.io/posts/2017-03-23-solid-principals/</guid><description>Summary: What is SOLID? Golang&amp;rsquo;s embodiment of SOLID as a language design This is again a post for myself, as a precursor to the common design pattern in game dev which is possibly a follow up post. The credits for any information put up here goes to Dave Cheney from where I have derived this material.
What is SOLID? The SOLID principles are the top five, rather important patterns usually found the Object oriented programming languages.</description></item></channel></rss>