<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Notes</title><link>http://shabinesh.github.io/tags/go/</link><description>Recent content in go on Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Mar 2017 11:39:17 +0530</lastBuildDate><atom:link href="http://shabinesh.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>SOLID principles in Golang</title><link>http://shabinesh.github.io/posts/2017-03-23-solid-principals/</link><pubDate>Thu, 23 Mar 2017 11:39:17 +0530</pubDate><guid>http://shabinesh.github.io/posts/2017-03-23-solid-principals/</guid><description>Summary: What is SOLID? Golang&amp;rsquo;s embodiment of SOLID as a language design This is again a post for myself, as a precursor to the common design pattern in game dev which is possibly a follow up post. The credits for any information put up here goes to Dave Cheney from where I have derived this material.
What is SOLID? The SOLID principles are the top five, rather important patterns usually found the Object oriented programming languages.</description></item></channel></rss>