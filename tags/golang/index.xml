<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Notes</title><link>http://shabinesh.github.io/tags/golang/</link><description>Recent content in golang on Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 May 2020 13:53:26 +0200</lastBuildDate><atom:link href="http://shabinesh.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Golang</title><link>http://shabinesh.github.io/notes/docker-golang/</link><pubDate>Fri, 08 May 2020 13:53:26 +0200</pubDate><guid>http://shabinesh.github.io/notes/docker-golang/</guid><description>again this is for my self reference or for easy copy-paste for new projects.
Assume this is the production grade program we need to dockerize and run. package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;saying hello to the world&amp;#34;) } Basic #-NAME: Dockerfile multistage build
FROM golang:1.14-alpine as builder WORKDIR /go/src/github.com/shabinesh/prog COPY main.go . COPY vendor ./vendor RUN go build -o main . FROM alpine:latest RUN apk --no-cache add ca-certificates WORKDIR / COPY --from=0 /go/src/github.</description></item><item><title>SOLID principles in Golang</title><link>http://shabinesh.github.io/posts/2017-03-23-solid-principals/</link><pubDate>Thu, 23 Mar 2017 11:39:17 +0530</pubDate><guid>http://shabinesh.github.io/posts/2017-03-23-solid-principals/</guid><description>Summary: What is SOLID? Golang&amp;rsquo;s embodiment of SOLID as a language design This is again a post for myself, as a precursor to the common design pattern in game dev which is possibly a follow up post. The credits for any information put up here goes to Dave Cheney from where I have derived this material.
What is SOLID? The SOLID principles are the top five, rather important patterns usually found the Object oriented programming languages.</description></item></channel></rss>