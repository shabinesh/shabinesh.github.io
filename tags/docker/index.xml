<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Sab's</title><link>http://shabinesh.github.io/tags/docker/</link><description>Recent content in docker on Sab's</description><generator>Hugo -- gohugo.io</generator><language>en-in</language><lastBuildDate>Sat, 06 Jun 2020 16:13:34 +0200</lastBuildDate><atom:link href="http://shabinesh.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Mocking AWS Postgres Extensions</title><link>http://shabinesh.github.io/blog/notes/mocking_aws_extensions/</link><pubDate>Sat, 06 Jun 2020 16:13:34 +0200</pubDate><guid>http://shabinesh.github.io/blog/notes/mocking_aws_extensions/</guid><description>Mocking AWS PG Extensions The project I am working on uses RDS with aws_s3 (&amp;amp; aws_commons) postgres extensions. However these extensions are also need postgres docker container used in the CI for integration tests to not break the migrations. A mock extension was built to keep the tests from breaking. Create .control files Create the schema for the module being created Add the functions in the schema in sql files In this case there are two .</description></item><item><title>Docker Golang</title><link>http://shabinesh.github.io/blog/notes/docker-golang/</link><pubDate>Fri, 08 May 2020 13:53:26 +0200</pubDate><guid>http://shabinesh.github.io/blog/notes/docker-golang/</guid><description>again this is for my self reference or for easy copy-paste for new projects.
Assume this is the production grade program we need to dockerize and run. package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;saying hello to the world&amp;#34;) } Basic #-NAME: Dockerfile multistage build
FROM golang:1.14-alpine as builder WORKDIR /go/src/github.com/shabinesh/prog COPY main.go . COPY vendor ./vendor RUN go build -o main . FROM alpine:latest RUN apk --no-cache add ca-certificates WORKDIR / COPY --from=0 /go/src/github.</description></item></channel></rss>