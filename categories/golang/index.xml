<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Notes</title><link>http://shabinesh.github.io/categories/golang/</link><description>Recent content in golang on Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Jul 2021 11:39:59 +0200</lastBuildDate><atom:link href="http://shabinesh.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Elisp function to run Golang unit tests</title><link>http://shabinesh.github.io/notes/run-golang-tests/</link><pubDate>Fri, 16 Jul 2021 11:39:59 +0200</pubDate><guid>http://shabinesh.github.io/notes/run-golang-tests/</guid><description> A elisp function to run a unit test. Put the function in ~/.emacs
(defun go-run-unit-test () (interactive) (let ((lineStr &amp;#34;&amp;#34;)) (if (string= (thing-at-point &amp;#39;word) &amp;#34;func&amp;#34;) (setq lineStr (thing-at-point &amp;#39;word)) (progn (search-backward &amp;#34;func&amp;#34;) (setq lineStr (thing-at-point &amp;#39;line)))) (let ((funcName (string-trim-left (car (split-string (thing-at-point &amp;#39;line) &amp;#34;(&amp;#34;)) &amp;#34;^func\s&amp;#34;))) (start-process &amp;#34;GOTEST&amp;#34; &amp;#34;*GOTEST*&amp;#34; &amp;#34;go&amp;#34; &amp;#34;test&amp;#34; &amp;#34;-run&amp;#34; (concat &amp;#34;^&amp;#34; funcName &amp;#34;$&amp;#34;))))) go-run-unit-test</description></item><item><title>Golang Reflect</title><link>http://shabinesh.github.io/notes/golang-reflect/</link><pubDate>Tue, 19 May 2020 17:10:38 +0200</pubDate><guid>http://shabinesh.github.io/notes/golang-reflect/</guid><description>Reflection in Golang Incase you are here looking to learn about reflection, a better resource is https://blog.golang.org/laws-of-reflection Interfaces in Go are types which hold concrete value and underlying type of the value with a precondition that value should implement methods of the interface. For example; types implementing Read([]byte) (int, error) method satisfy the io.Reader interface. However interface{}, without any method definition will match all types.
A struct type can be assigned to an empty interface, the assertion is the concrete type should implement the methods of the interface type.</description></item></channel></rss>